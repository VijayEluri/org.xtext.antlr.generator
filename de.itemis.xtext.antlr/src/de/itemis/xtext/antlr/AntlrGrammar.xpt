«REM»
/*******************************************************************************
 * Copyright (c) 2008 itemis AG (http://www.itemis.eu) and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 *******************************************************************************/
«ENDREM»

«IMPORT xtext»
«IMPORT xtextgen»

«EXTENSION org::eclipse::xtext::generator::Naming»
«EXTENSION de::itemis::xtext::antlr::AntlrGrammar»
«EXTENSION de::itemis::xtext::antlr::Parser»

«DEFINE grammar FOR Grammar»
«FILE getGrammarFileName().asPath()+".g" SRC_GEN-»
/*
«fileHeader()»
*/
grammar «getGrammarFileName().toSimpleName()»;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package «getGrammarFileName().toJavaPackage()»;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package «getGrammarFileName().toJavaPackage()»; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.xtext.parsetree.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.eclipse.xtext.conversion.ValueConverterException;
import «gaFQName()»;

}

@parser::members {
 
 	private «gaSimpleName()» grammarAccess;
 	
    public «getInternalParserClassName().toSimpleName()»(TokenStream input, IAstFactory factory, «gaSimpleName()» grammarAccess) {
        super(input, factory, grammarAccess.getGrammar());
        this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected InputStream getTokenFile() {
    	ClassLoader classLoader = getClass().getClassLoader();
    	return classLoader.getResourceAsStream("«getGrammarFileName().asPath()».tokens");
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "«allParserRules().first().name»";	
   	} 
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}
«EXPAND antlrRules»
«ENDFILE»
«ENDDEFINE»

«DEFINE antlrRules FOR Grammar»
«EXPAND rule(this) FOREACH allParserRules()»
«EXPAND rule FOREACH allTerminalRules()»
«ENDDEFINE»


«DEFINE rule(Grammar original) FOR ParserRule»
«IF isCalled(original,this)»
«IF !isDatatypeRule()»
// Entry rule «entryRuleName()»
«entryRuleName()» returns [EObject current=null] :
	{ currentNode = «EXPAND createCompositeNode» }
	 iv_«ruleName()»=«ruleName()» 
	 { $current=$iv_«ruleName()».current; } 
	 EOF 
;

// Rule «name»
«ruleName()» returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
«IF definesHiddenTokens-»
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens(«FOREACH hiddenTokens AS hidden SEPARATOR ", "»"«hidden.ruleName()»"«ENDFOREACH-»);
«ENDIF-»    
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
«IF definesHiddenTokens-»
		myHiddenTokenState.restore();
«ENDIF-»
    }:
    «EXPAND ebnf FOR this.alternatives»;
«ELSE»
// Entry rule «entryRuleName()»
«entryRuleName()» returns [String current=null] :
	{ currentNode = «EXPAND createCompositeNode» } 
	 iv_«ruleName()»=«ruleName()» 
	 { $current=$iv_«ruleName()».current.getText(); }  
	 EOF 
;

// Rule «name»
«ruleName()» returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
«IF definesHiddenTokens-»
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens(«FOREACH hiddenTokens AS hidden SEPARATOR ", "»"«hidden.ruleName()»"«ENDFOREACH-»);
«ENDIF-» 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
	    lastConsumedDatatypeToken = $current;
«IF definesHiddenTokens-»
		myHiddenTokenState.restore();
«ENDIF-» 
    }:
   «EXPAND dataTypeEbnf FOR this.alternatives»
    ;
«ENDIF»
«ENDIF»
«ENDDEFINE»

«DEFINE rule FOR TerminalRule»
«ruleName()» : «toLexerBody()»;
«ENDDEFINE»

«DEFINE ebnf FOR AbstractElement-»
«IF mustBeParenthesized()»(«EXPAND ebnf2»)«ELSE»«EXPAND ebnf2»«ENDIF»«cardinality-»
«ENDDEFINE»

«DEFINE dataTypeEbnf FOR AbstractElement-»
«IF mustBeParenthesized()»(«EXPAND dataTypeEbnf2»)«ELSE»«EXPAND dataTypeEbnf2»«ENDIF»«cardinality-»
«ENDDEFINE»

«DEFINE dataTypeEbnf2 FOR AbstractElement»ERROR «metaType.name» not matched«ENDDEFINE»

«DEFINE dataTypeEbnf2 FOR Alternatives-»«EXPAND dataTypeEbnf FOREACH groups SEPARATOR '\n    |'»«ENDDEFINE»

«DEFINE dataTypeEbnf2 FOR Group»«EXPAND dataTypeEbnf FOREACH abstractTokens»«ENDDEFINE»

«DEFINE dataTypeEbnf2 FOR Keyword»
	kw='«value.toJavaString()»' 
    {
        $current.merge(kw);
        «EXPAND createLeafNode» 
    }
«ENDDEFINE»

«DEFINE dataTypeEbnf2 FOR RuleCall-»
«IF ParserRule.isInstance(rule) && !isAssigned()»
    { 
        currentNode=«EXPAND createCompositeNode» 
    }
«ENDIF-»
    «localVar()»=«rule.ruleName()-»
    {
		$current.merge(«localVar()»);
    }
«IF ParserRule.isInstance(rule) && !isAssigned()»
    { 
        currentNode = currentNode.getParent();
    }
«ENDIF-»
«IF TerminalRule.isInstance(rule)»
    { 
    «EXPAND createLeafNode» 
    }
«ENDIF-»
«ENDDEFINE»

«DEFINE ebnf2 FOR AbstractElement»ERROR «metaType.name» not matched«ENDDEFINE»

«DEFINE ebnf2 FOR Alternatives-»«EXPAND ebnf FOREACH groups SEPARATOR '\n    |'»«ENDDEFINE»

«DEFINE ebnf2 FOR Group»«EXPAND ebnf FOREACH abstractTokens»«ENDDEFINE»

«DEFINE assignmentEbnf FOR AbstractElement-»
«EXPAND ebnf»
«ENDDEFINE»

«DEFINE assignmentEbnf FOR Group-»
«ERROR "assignmentEbnf is not supported for Group"»
«ENDDEFINE»

«DEFINE assignmentEbnf FOR Assignment-»
«ERROR "assignmentEbnf is not supported for Assignment"»
«ENDDEFINE»

«DEFINE assignmentEbnf FOR Action-»
«ERROR "assignmentEbnf is not supported for Action"»
«ENDDEFINE»

«DEFINE assignmentEbnf FOR CrossReference-»
«EXPAND crossrefEbnf(this) FOR rule-»
«ENDDEFINE»

«DEFINE crossrefEbnf(CrossReference ref) FOR AbstractRule-»
«ERROR "crossrefEbnf is not supported for AbstractRule"»
«ENDDEFINE»

«DEFINE crossrefEbnf(CrossReference ref) FOR ParserRule-»
«IF !isDatatypeRule()-»
«ERROR "crossrefEbnf is not supported for ParserRule that is not a datatype rule"»
«ELSE-»
		{ 
	        currentNode=«EXPAND createCompositeNode FOR ref» 
	    }
		«ruleName()-»
		{ 
	        currentNode = currentNode.getParent();
	    }
«ENDIF-»
«ENDDEFINE»

«DEFINE crossrefEbnf(CrossReference ref) FOR TerminalRule-»
	«ruleName()»
	{
		«EXPAND createLeafNode FOR ref» 
	}
«ENDDEFINE»

«DEFINE assignmentEbnf FOR Alternatives-»
(«EXPAND assignmentEbnf FOREACH groups SEPARATOR '\n    |'»)
«ENDDEFINE»

«DEFINE assignmentEbnf FOR RuleCall-»
«EXPAND assignmentEbnf(this) FOR rule-»
«ENDDEFINE»

«DEFINE assignmentEbnf(RuleCall call) FOR AbstractRule-»
«ERROR "assignmentEbnf is not supported for AbstractRule"»
«ENDDEFINE»

«DEFINE assignmentEbnf(RuleCall call) FOR ParserRule-»
«IF call.eContainer.metaType!=Alternatives-»
«ruleName()-»
«ELSE-»
	{ 
        currentNode=«EXPAND createCompositeNode FOR call» 
    }
	«ruleName()-»
	{ 
        currentNode = currentNode.getParent();
    }
«ENDIF-»
«ENDDEFINE»

«DEFINE assignmentEbnf(RuleCall call) FOR TerminalRule-»
	«ruleName()»
	{
		«EXPAND createLeafNode FOR call» 
	}
«ENDDEFINE»

«DEFINE ebnf2 FOR Assignment»	
	«IF !eAllContents.typeSelect(CrossReference).isEmpty»
		«REM» Cross references are handled in the linking phase «ENDREM»
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.«containingParserRule().grammarElementAccess()».getType().getType());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
		«EXPAND assignmentEbnf FOR terminal»
		// TODO assign feature to currentNode
	«ELSE»
	    «IF isParserRuleAssignment()»
	    { 
	        currentNode=«EXPAND createCompositeNode FOR terminal» 
	    }
	    «ENDIF-»
	    «localVar()»=«EXPAND assignmentEbnf FOR terminal» 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.«containingParserRule().grammarElementAccess()».getType().getType());
	            «IF isParserRuleAssignment()»associateNodeWithAstElement(currentNode.getParent(), $current);
	            «ELSE»associateNodeWithAstElement(currentNode, $current);
	            «ENDIF-»
	        }
	        «REM»the use of input.LT(-1) in the following line is a workaroudn for a bug of antlr, where assignements of alternative keywords are ignored when there are actions«ENDREM»
	        try {
	       		«setOrAdd()»($current, "«feature»", «
	        		IF isBoolean()»true«
	        		ELSE»«eAllContents.typeSelect(Keyword).isEmpty ? localVar() : "/* " + localVar() + " */ input.LT(-1)"»«
	        		ENDIF», «terminal.toStringLiteral()», «
	        		IF isParserRuleAssignment()»currentNode«
	        		ELSE»lastConsumedNode«ENDIF»);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        «IF isParserRuleAssignment()»currentNode = currentNode.getParent();
	        «ENDIF-»
	    }
	«ENDIF»
«ENDDEFINE»

«DEFINE ebnf2 FOR CrossReference»
«IF ParserRule.isInstance(rule)»
    { 
        currentNode=«EXPAND createCompositeNode» 
    }
«ENDIF-»
	«rule.ruleName()-»
«IF ParserRule.isInstance(rule)»
    { 
        currentNode = currentNode.getParent();
    }
«ELSE-»
    { 
    «EXPAND createLeafNode» 
    }
«ENDIF-»
«ENDDEFINE»

«DEFINE ebnf2 FOR Action»
    { 
        temp=factory.create(grammarAccess.«grammarElementAccess()».getTypeName().getType());
«IF feature != null-»
        try {
        	factory.«setOrAdd()»(temp, "«feature»", $current, null /*ParserRule*/, currentNode);
        } catch(ValueConverterException vce) {
        	handleValueConverterException(vce);
        }
«ENDIF-»
        $current = temp; 
        temp = null;
        «EXPAND insertCompositeNode» 
        associateNodeWithAstElement(currentNode, $current); 
    }
«ENDDEFINE»

«DEFINE ebnf2 FOR Keyword»'«value.toJavaString()»' 
    {
        «EXPAND createLeafNode» 
    }
«ENDDEFINE»

«DEFINE ebnf2 FOR RuleCall-»
«IF ParserRule.isInstance(rule) && !isAssigned()»
    { 
        currentNode=«EXPAND createCompositeNode» 
    }
    «localVar()»=«ENDIF-»
«rule.ruleName()-»
«IF ParserRule.isInstance(rule) && !isAssigned()»
    { 
        $current = $«localVar()».current; 
        currentNode = currentNode.getParent();
    }
«ENDIF-»
«IF TerminalRule.isInstance(rule) || ParserRule.isInstance(rule)»
    { 
    «EXPAND createLeafNode» 
    }
«ENDIF-»
«ENDDEFINE»

«DEFINE createCompositeNode FOR emf::EObject
    »createCompositeNode(grammarAccess.«
    grammarElementAccess(this)
    », currentNode);«
ENDDEFINE»

«DEFINE insertCompositeNode FOR Action
    »CompositeNode newNode = createCompositeNode(grammarAccess.«
    grammarElementAccess(this)
    », currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode;«
ENDDEFINE»

«DEFINE createLeafNode FOR emf::EObject
    »createLeafNode(grammarAccess.«
    grammarElementAccess(this)
    », «
    IF isAssigned()
        »"«
        containingAssignment().feature
        »"«
    ELSE
        »null«
    ENDIF
    »);«
ENDDEFINE»

