«REM»
/*******************************************************************************
 * Copyright (c) 2008 itemis AG (http://www.itemis.eu) and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 *******************************************************************************/
«ENDREM»

«IMPORT org::eclipse::xtext»
«IMPORT org::eclipse::emf::ecore»

«EXTENSION org::eclipse::xtext::generator::Naming»
«EXTENSION de::itemis::xtext::antlr::AntlrGrammar»
«EXTENSION de::itemis::xtext::antlr::Parser»
«EXTENSION org::eclipse::xtext::EcoreUtils»

«DEFINE grammar(AntlrOptions options) FOR Grammar»
«FILE getGrammarFileName().asPath()+".g" SRC_GEN-»
/*
«fileHeader()»
*/
grammar «getGrammarFileName().toSimpleName()»;

options {
	superClass=AbstractInternalAntlrParser;
	«IF options.backtrack-»
	backtrack=true;
	«ENDIF-»
	«IF options.memoize-»
	 memoize=true;
	«ENDIF-»
	«IF options.k>=0»
	 k=«options.k»;
	«ENDIF»
}

@lexer::header {
package «getGrammarFileName().toJavaPackage()»;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package «getGrammarFileName().toJavaPackage()»; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.xtext.parsetree.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
«IF !allEnumRules().isEmpty-»
import org.eclipse.emf.common.util.Enumerator;
«ENDIF-»
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.eclipse.xtext.conversion.ValueConverterException;
import «gaFQName()»;

}

@parser::members {

«IF options.backtrack-»
/*
  This grammar contains a lot of empty actions to work around a bug in ANTLR.
  Otherwise the ANTLR tool will create synpreds that cannot be compiled in some rare cases.
*/
 
«ENDIF-»
 	private «gaSimpleName()» grammarAccess;
 	
    public «getInternalParserClassName().toSimpleName()»(TokenStream input, IAstFactory factory, «gaSimpleName()» grammarAccess) {
        this(input);
        this.factory = factory;
        registerRules(grammarAccess.getGrammar());
        this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected InputStream getTokenFile() {
    	ClassLoader classLoader = getClass().getClassLoader();
    	return classLoader.getResourceAsStream("«getGrammarFileName().asPath()».tokens");
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "«allParserRules().first().name»";	
   	} 
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}
«EXPAND antlrRules(options)»
«ENDFILE»
«ENDDEFINE»

«DEFINE antlrRules(AntlrOptions options) FOR Grammar»
«EXPAND rule(this, options) FOREACH allParserRules()»
«EXPAND rule(this, options) FOREACH allEnumRules()»
«EXPAND rule FOREACH allTerminalRules()»
«ENDDEFINE»


«DEFINE rule(Grammar original, AntlrOptions options) FOR ParserRule»
«IF isCalled(original,this)»
«IF !isDatatypeRule()»
// Entry rule «entryRuleName()»
«entryRuleName()» returns [EObject current=null] 
«IF definesHiddenTokens-»
	@init { 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens(«FOREACH hiddenTokens AS hidden SEPARATOR ", "»"«hidden.ruleName()»"«ENDFOREACH-»);
	}
«ENDIF-»
	:
	{ currentNode = «EXPAND createCompositeNode» }
	 iv_«ruleName()»=«ruleName()» 
	 { $current=$iv_«ruleName()».current; } 
	 EOF 
;
«IF definesHiddenTokens-»
finally {
	myHiddenTokenState.restore();
}
«ENDIF-»

// Rule «name»
«ruleName()» returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
«IF definesHiddenTokens-»
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens(«FOREACH hiddenTokens AS hidden SEPARATOR ", "»"«hidden.ruleName()»"«ENDFOREACH-»);
«ENDIF-» 
«EXPAND localVariables FOR alternatives-»
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
    «EXPAND ebnf(options) FOR this.alternatives»
;
«IF definesHiddenTokens-»
finally {
	myHiddenTokenState.restore();
}
«ENDIF-»
«ELSE»
// Entry rule «entryRuleName()»
«entryRuleName()» returns [String current=null] 
«IF definesHiddenTokens-»
	@init { 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens(«FOREACH hiddenTokens AS hidden SEPARATOR ", "»"«hidden.ruleName()»"«ENDFOREACH-»);
	}
«ENDIF-»
	:
	{ currentNode = «EXPAND createCompositeNode» } 
	 iv_«ruleName()»=«ruleName()» 
	 { $current=$iv_«ruleName()».current.getText(); }  
	 EOF 
;
«IF definesHiddenTokens-»
finally {
	myHiddenTokenState.restore();
}
«ENDIF-»

// Rule «name»
«ruleName()» returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
«IF definesHiddenTokens-»
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens(«FOREACH hiddenTokens AS hidden SEPARATOR ", "»"«hidden.ruleName()»"«ENDFOREACH-»);
«ENDIF-» 
«EXPAND localVariables FOR alternatives-»
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:
   «EXPAND dataTypeEbnf FOR this.alternatives»
    ;
«IF definesHiddenTokens-»
finally {
	myHiddenTokenState.restore();
}
«ENDIF-» 
«ENDIF»
«ENDIF»
«ENDDEFINE»

«DEFINE rule(Grammar original, AntlrOptions options) FOR EnumRule»
«IF isCalled(original,this)»
// Rule «name»
«ruleName()» returns [Enumerator current=null] 
    @init { setCurrentLookahead(); resetLookahead(); }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
    «EXPAND ebnf(options) FOR this.alternatives»;
«ENDIF»
«ENDDEFINE»

«DEFINE ebnf2(AntlrOptions options) FOR EnumLiteralDeclaration-»
	'«literal.value.toAntlrString()»' 
	{
        $current = grammarAccess.«grammarElementAccess(this)».getEnumLiteral().getInstance();
        «EXPAND createLeafNode» 
    }
«ENDDEFINE»

«DEFINE rule FOR TerminalRule»
«ruleName()» : «toLexerBody()»;
«ENDDEFINE»

«DEFINE ebnf(AntlrOptions options) FOR AbstractElement-»
«IF mustBeParenthesized()»(«EXPAND ebnf2(options)»)«ELSE»«EXPAND ebnf2(options)»«ENDIF»«cardinality-»
«ENDDEFINE»

«DEFINE localVariables FOR AbstractElement-»
«ENDDEFINE»

«DEFINE localVariables FOR CompoundElement-»
«EXPAND localVariables FOREACH elements-»
«ENDDEFINE»

«DEFINE localVariables FOR UnorderedGroup-»
	  boolean[] «localVar()» = new boolean[«elements.size»];
«EXPAND localVariables FOREACH elements-»
«ENDDEFINE»

«DEFINE dataTypeEbnf FOR AbstractElement-»
«IF mustBeParenthesized()»(«EXPAND dataTypeEbnf2»)«ELSE»«EXPAND dataTypeEbnf2»«ENDIF»«cardinality-»
«ENDDEFINE»

«DEFINE dataTypeEbnf2 FOR AbstractElement»ERROR «metaType.name» not matched«ENDDEFINE»

«DEFINE dataTypeEbnf2 FOR Alternatives-»«EXPAND dataTypeEbnf FOREACH elements SEPARATOR '\n    |'»«ENDDEFINE»

«DEFINE dataTypeEbnf2 FOR Group»«EXPAND dataTypeEbnf FOREACH elements»«ENDDEFINE»

«DEFINE dataTypeEbnf2 FOR UnorderedGroup»
«LET elements.reject(e|e.isOptionalCardinality()).size AS mandatoryContent»
(
	{ 
	  «localVar()» = new boolean[«elements.size»];
«IF mandatoryContent != 0-»
	  int remaining_«localVar()» = «mandatoryContent»;
«ENDIF-»
	}
	(
		(
«FOREACH elements AS element ITERATOR it»
			( 
				{!«localVar()»[«it.counter0»]}?=>(
					{ 
	 				  «localVar()»[«it.counter0»] = true;
	 				  «IF !element.isOptionalCardinality()»remaining_«localVar()»--;«ENDIF»
	 				}
					(«EXPAND dataTypeEbnf2 FOR element»)«IF element.isMultipleCardinality()»+«ENDIF»
 				)
			)  «IF !it.lastIteration»|«ENDIF»
«ENDFOREACH»
		)«IF mandatoryContent != 0-»+
	  	{remaining_«localVar()»==0}?«ELSE»*«ENDIF»	
	)
)
	{ 
	  «localVar()» = new boolean[«elements.size»];
	}
«ENDLET»
«ENDDEFINE»

«DEFINE dataTypeEbnf2 FOR Keyword»
	kw='«value.toAntlrString()»' 
    {
        $current.merge(kw);
        «EXPAND createLeafNode» 
    }
«ENDDEFINE»

«DEFINE dataTypeEbnf2 FOR RuleCall-»
«IF (ParserRule.isInstance(rule) || EnumRule.isInstance(rule)) && !isAssigned()»
    { 
        currentNode=«EXPAND createCompositeNode» 
    }
«ENDIF-»
    «localVar()»=«rule.ruleName()-»
    {
		$current.merge(«localVar()»);
    }
«IF (ParserRule.isInstance(rule) || EnumRule.isInstance(rule)) && !isAssigned()»
    { 
        currentNode = currentNode.getParent();
    }
«ENDIF-»
«IF TerminalRule.isInstance(rule)»
    { 
    «EXPAND createLeafNode» 
    }
«ENDIF-»
«ENDDEFINE»

«DEFINE ebnf2(AntlrOptions options) FOR AbstractElement»ERROR «metaType.name» not matched«ENDDEFINE»

«DEFINE ebnf2(AntlrOptions options) FOR Alternatives-»«EXPAND ebnf(options) FOREACH elements SEPARATOR '\n    |'»«ENDDEFINE»

«DEFINE ebnf2(AntlrOptions options) FOR Group»«EXPAND ebnf(options) FOREACH elements»«ENDDEFINE»

«DEFINE ebnf2(AntlrOptions options) FOR UnorderedGroup»
«LET elements.reject(e|e.isOptionalCardinality()).size AS mandatoryContent»
(
	{ 
	  «localVar()» = new boolean[«elements.size»];
«IF mandatoryContent != 0-»
	  int remaining_«localVar()» = «mandatoryContent»;
«ENDIF-»
	}
	(
		(
«FOREACH elements AS element ITERATOR it»
			( 
				{!«localVar()»[«it.counter0»]}?=>(
					{ 
	 				  «localVar()»[«it.counter0»] = true;
	 				  «IF !element.isOptionalCardinality()»remaining_«localVar()»--;«ENDIF»
	 				}
					(«EXPAND ebnf2(options) FOR element»)«IF element.isMultipleCardinality()»+«ENDIF»
 				)
			)  «IF !it.lastIteration»|«ENDIF»
«ENDFOREACH»
		)«IF mandatoryContent != 0-»+
	  	{remaining_«localVar()»==0}?«ELSE»*«ENDIF»	
	)
)
	{ 
	  «localVar()» = new boolean[«elements.size»];
	}
«ENDLET»
«ENDDEFINE»

«DEFINE crossrefEbnf(CrossReference ref) FOR AbstractElement-»
«ERROR "crossrefEbnf is not supported for AbstractElement"»
«ENDDEFINE»

«DEFINE crossrefEbnf(CrossReference ref) FOR Alternatives-»
		(«EXPAND crossrefEbnf(ref) FOREACH elements SEPARATOR '\n    |'»)
«ENDDEFINE»

«DEFINE crossrefEbnf(CrossReference ref) FOR RuleCall-»
«EXPAND crossrefEbnf(ref) FOR rule-»
«ENDDEFINE»

«DEFINE crossrefEbnf(CrossReference ref) FOR AbstractRule-»
«ERROR "crossrefEbnf is not supported for AbstractRule"»
«ENDDEFINE»

«DEFINE crossrefEbnf(CrossReference ref) FOR ParserRule-»
«IF !isDatatypeRule()-»
«ERROR "crossrefEbnf is not supported for ParserRule that is not a datatype rule"»
«ELSE-»
		{ 
	        currentNode=«EXPAND createCompositeNode FOR ref» 
	    }
		«ruleName()-»
		{ 
	        currentNode = currentNode.getParent();
	    }
«ENDIF-»
«ENDDEFINE»

«DEFINE crossrefEbnf(CrossReference ref) FOR EnumRule-»
		{ 
	        currentNode=«EXPAND createCompositeNode FOR ref» 
	    }
		«ruleName()-»
		{ 
	        currentNode = currentNode.getParent();
	    }
«ENDDEFINE»

«DEFINE crossrefEbnf(CrossReference ref) FOR TerminalRule-»
	«ruleName()»
	{
		«EXPAND createLeafNode FOR ref» 
	}
«ENDDEFINE»

«DEFINE assignmentEbnf(Assignment assignment, AntlrOptions options) FOR AbstractElement-»
		«assignment.localVar(this)»=«EXPAND ebnf(options)» 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.«assignment.containingParserRule().grammarElementAccess()».getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        «REM»the use of input.LT(-1) in the following line is a workaroudn for a bug of antlr, where assignements of alternative keywords are ignored when there are actions«ENDREM»
	        try {
	       		«assignment.setOrAdd()»($current, "«assignment.feature»", «
	        		IF assignment.isBoolean()»true«
	        		ELSE»«assignment.localVar(this)»«
	        		ENDIF», «assignment.terminal.toStringLiteral()», lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
«ENDDEFINE»

«DEFINE assignmentEbnf(Assignment assignment, AntlrOptions options) FOR Group-»
«ERROR "assignmentEbnf is not supported for Group"»
«ENDDEFINE»

«DEFINE assignmentEbnf(Assignment assignment, AntlrOptions options) FOR Assignment-»
«ERROR "assignmentEbnf is not supported for Assignment"»
«ENDDEFINE»

«DEFINE assignmentEbnf(Assignment assignment, AntlrOptions options) FOR Action-»
«ERROR "assignmentEbnf is not supported for Action"»
«ENDDEFINE»

«DEFINE assignmentEbnf(Assignment assignment, AntlrOptions options) FOR Alternatives-»
(
«EXPAND assignmentEbnf(assignment, options) FOREACH elements SEPARATOR '\n    |'»
)
«ENDDEFINE»

«DEFINE assignmentEbnf(Assignment assignment, AntlrOptions options) FOR RuleCall-»
«EXPAND assignmentEbnf(assignment, this) FOR rule-»
«ENDDEFINE»

«DEFINE assignmentEbnf(Assignment assignment, RuleCall call) FOR AbstractRule-»
«ERROR "assignmentEbnf is not supported for AbstractRule"»
«ENDDEFINE»

«DEFINE assignmentEbnf(Assignment assignment, RuleCall call) FOR ParserRule-»
		{ 
	        currentNode=«EXPAND createCompositeNode FOR call» 
	    }
		«assignment.localVar(call)»=«ruleName()-»
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.«assignment.containingParserRule().grammarElementAccess()».getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		«assignment.setOrAdd()»(
	       			$current, 
	       			"«assignment.feature»",
	        		«IF assignment.isBoolean()»true«ELSE»«assignment.localVar(call)»«ENDIF», 
	        		«call.toStringLiteral()», 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
«ENDDEFINE»

«DEFINE assignmentEbnf(Assignment assignment, RuleCall call) FOR EnumRule-»
		{ 
	        currentNode=«EXPAND createCompositeNode FOR call» 
	    }
		«assignment.localVar(call)»=«ruleName()-»
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.«assignment.containingParserRule().grammarElementAccess()».getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		«assignment.setOrAdd()»(
	       			$current, 
	       			"«assignment.feature»",
	        		«IF assignment.isBoolean()»true«ELSE»«assignment.localVar(call)»«ENDIF», 
	        		«call.toStringLiteral()», 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
«ENDDEFINE»

«DEFINE assignmentEbnf(Assignment assignment, RuleCall call) FOR TerminalRule-»
		«assignment.localVar(call)»=«ruleName()»
		{
			«EXPAND createLeafNode FOR call» 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.«assignment.containingParserRule().grammarElementAccess()».getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		«assignment.setOrAdd()»(
	       			$current, 
	       			"«assignment.feature»",
	        		«IF assignment.isBoolean()»true«ELSE»«assignment.localVar(call)»«ENDIF», 
	        		«call.toStringLiteral()», 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
«ENDDEFINE»

«DEFINE assignmentEbnf(Assignment assignment, AntlrOptions options) FOR CrossReference-»
«IF options.backtrack-»
		{ 
		  /* */ 
		}
«ENDIF-»
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.«assignment.containingParserRule().grammarElementAccess()».getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
		«EXPAND crossrefEbnf(this) FOR terminal-»
«ENDDEFINE»

«DEFINE ebnf2(AntlrOptions options) FOR Assignment»
(
«EXPAND assignmentEbnf(this, options) FOR terminal»
)
«ENDDEFINE»

«DEFINE ebnf2(AntlrOptions options) FOR CrossReference»
«ERROR "ebnf2 is not supported for CrossReference"»
«ENDDEFINE»

«DEFINE ebnf2(AntlrOptions options) FOR Action»
«IF options.backtrack-»
	{ 
	  /* */ 
	}
«ENDIF-»
    { 
        temp=factory.create(grammarAccess.«grammarElementAccess()».getType().getClassifier());
«IF feature != null-»
        try {
        	factory.«setOrAdd()»(temp, "«feature»", $current, null /*ParserRule*/, currentNode);
        } catch(ValueConverterException vce) {
        	handleValueConverterException(vce);
        }
«ENDIF-»
        $current = temp; 
        temp = null;
        «EXPAND insertCompositeNode» 
        associateNodeWithAstElement(currentNode, $current); 
    }
«ENDDEFINE»

«DEFINE ebnf2(AntlrOptions options) FOR Keyword-»
	'«value.toAntlrString()»' 
    {
        «EXPAND createLeafNode» 
    }
«ENDDEFINE»

«DEFINE ebnf2(AntlrOptions options) FOR RuleCall-»
«IF (ParserRule.isInstance(rule) && !isDatatypeRule((ParserRule)rule) || EnumRule.isInstance(rule)) && !isAssigned()»
«IF options.backtrack-»
	{ 
	  /* */ 
	}
«ENDIF-»
    { 
        currentNode=«EXPAND createCompositeNode» 
    }
    «localVar()»=«ENDIF-»
«rule.ruleName()-»
«IF (ParserRule.isInstance(rule) && !isDatatypeRule((ParserRule)rule) || EnumRule.isInstance(rule)) && !isAssigned()»
    { 
        $current = $«localVar()».current; 
        currentNode = currentNode.getParent();
    }
«ENDIF-»
«IF TerminalRule.isInstance(rule)»
    { 
    «EXPAND createLeafNode» 
    }
«ENDIF-»
«ENDDEFINE»

«DEFINE createCompositeNode FOR EObject
    »createCompositeNode(grammarAccess.«
    grammarElementAccess(this)
    », currentNode);«
ENDDEFINE»

«DEFINE insertCompositeNode FOR Action
    »CompositeNode newNode = createCompositeNode(grammarAccess.«
    grammarElementAccess(this)
    », currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode;«
ENDDEFINE»

«DEFINE createLeafNode FOR EObject
    »createLeafNode(grammarAccess.«
    grammarElementAccess(this)
    », «
    IF isAssigned()
        »"«
        containingAssignment().feature
        »"«
    ELSE
        »null«
    ENDIF
    »);«
ENDDEFINE»

