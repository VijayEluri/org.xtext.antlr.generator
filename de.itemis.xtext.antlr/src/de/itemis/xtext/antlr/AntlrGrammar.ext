/*******************************************************************************
 * Copyright (c) 2008 itemis AG (http://www.itemis.eu) and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 *******************************************************************************/
import xtext;

extension org::eclipse::xtext::Properties reexport;
extension org::eclipse::xtext::Extensions reexport;
extension org::eclipse::xtend::util::stdlib::io;

ruleName(ParserRule this) : !terminal ? 'rule'+name : "RULE_" + name.toUpperCase();
ruleName(LexerRule this) : 'RULE_'+name.toUpperCase();
ruleName(AbstractRule this) : error("Unsupported");

entryRuleName(ParserRule this) : 'entryRule'+name;


typeName(Action this) : typeName.type.name;
typeName(AbstractRule this) : type.type.name;

setOrAdd(Action this) : if operator=='+=' then 'add' else 'set';


setOrAdd(Assignment this) : if operator=='+=' then 'add' else 'set';

isCalled(ParserRule this) :
	let x = grammar().allParserRules() :
		x.indexOf(this)==0 || 
		x.grammar().eAllContents.flatten().typeSelect(RuleCall).rule.name.contains(this.name);

//TODO make localVars unique
localVar(Assignment this) : 'lv_'+feature;
localVar(RuleCall this) : 'this_'+rule.name;

toStringLiteral(xtext::AbstractElement this) :
	"null";

toStringLiteral(RuleCall this) :
	rule!=null ? '"'+this.rule.name+'"' :  "null";

toStringLiteral(Keyword this) :
	'"'+this.value+'"';
	
String toLexerBody(ParserRule this):
	JAVA org.eclipse.xtext.parser.antlr.TerminalRuleToLexerBody.toLexerBody(org.eclipse.xtext.ParserRule);


mustBeParenthesized(AbstractElement this) : true;
mustBeParenthesized(Group this) : true;
mustBeParenthesized(Alternatives this) : true;
mustBeParenthesized(Keyword this) : cardinality!=null;
mustBeParenthesized(RuleCall this) : cardinality!=null;

